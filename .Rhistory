## =>> CREACIÓN DE SECUENCIAS
sec <- 1:10
sec
sec2 <- -5:5
sec2
y <- seq(from=2, to=10, lenght=6)
y <- seq(from=2, to=10, length=6)
y
y <- seq(from=2, to=10, length=4)
y
# Creacion de secuencias con la funcion REP
x <- rep(1:4,4)
x
x <- rep("hello", 5)
x
?rep
rep("hello", each=2)
x <- rep(1:4, c(2,1,2,1))
x
## =>> REFERENCIA A LOS SUBCONJUNTOS
x <- seq(1,15,2)
x
x[1:3]
x[2:5]
class(x)
class(x[2:5])
y[c(1:3)]
y <- list("Hello", "Planet", "Earth!")
y[c(1:3)]
class(y[c(1,3)])
# Con operador [[
y <- list("Hello", "Planet", "Earth!")
pos <- c(1,2)
y[pos]
# Con operador [[
y <- list("Hello", "Planet", "Earth!")
y[[1]]
class(y[[1]])
Y[[c(1,3)]]
y[[c(1,3)]]
y <- list(age=c(18, 20, 28), height=c(1.60, 1.72, 1.79))
y
class(y)
y$age
class(y$age)
x <- matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE)
x
class(x[1,1])
class(x[1,1, drop = FALSE])
y <- list(age=c(15, 19, 20), height=c(1.60, 1.68, 1.76))
y[["age"]]
y <- list(age=c(15, 19, 20), height=c(1.60, 1.68, 1.76))
y[["age"]]
y[["a", exact=FALSE]]
# Extraer NA
y <- c(15, 22, 45, NA, NA, 51)
y
i <- is.na(y)
i
y[!i]
## =>> VECTORIZACIÓN
x <- rnorm(10000000)
x
z <- vector(mode = "numeric", length = 10000000)
y <- rnorm(10000000)
z
start <- proc.time()
for (i in 1:10000000){
z[i] <- x[i] + y[i]
}
proc.time()-start()
x <- rnorm(10000000)
y <- rnorm(10000000)
z <- vector(mode = "numeric", length = 10000000)
# Iteración
start <- proc.time()
for (i in 1:10000000){
z[i] <- x[i] + y[i]
}
proc.time()-start()
start <- proc.time()
for (i in 1:10000000){
z[i] <- x[i] + y[i]
}
proc.time()-start()
x <- rnorm(10000000)
y <- rnorm(10000000)
z <- vector(mode = "numeric", length = 10000000)
start <- proc.time()
for (i in 1:10000000){
z[i] <- x[i] + y[i]
}
proc.time()-start()
?proc.time
?start
library(stats)
start <- proc.time()
for (i in 1:10000000){
z[i] <- x[i] + y[i]
}
proc.time()-start()
x
x <- rnorm(10000000)
y <- rnorm(10000000)
z <- vector(mode = "numeric", length = 10000000)
x
start <- proc.time()
for (i in 1:10000000){
z[i] <- x[i] + y[i]
}
proc.time()-start()
start <- proc.time()
for (i in 1:10000000){
z[i] <- x[i]+y[i]
}
proc.time()-start()
for (i in 1:10000000){
z[i] <- x[i]+y[i]
}
proc.time() - start()
proc.time() - start
library(readr)
crx <- read_csv("~/Downloads/crx.data", col_names = FALSE)
View(crx)
# 2.Cargar en RStudio para su posterior manipulaci?n.
crx
data <- c(crx$X2, crx$X3, crx$X8, crx$X11)
data
rm(data)
data <- data.frame(crx$X2, crx$X3, crx$X8, crx$X11)
data
# 2.Cargar en RStudio para su posterior manipulaci?n.
crx
rm(data)
pos <- which(data=='?')
View(crx)
pos <- which(crx=='?')
pos
mean(crx$X2)
pos <- which(crx$X2=='?')
pos
mean(crx$X2)
prom <- mean(crx$X2, na.rm = TRUE)
data <- data.frame(crx$X2, crx$X3, crx$X8, crx$X11)
data
data <- as.double(data)
data <- as.double(data[1:4])
data[1:4,]
data[,1:4]
data <- as.double(data[,1:4])
pos <- which(data=='?')
pos
data <- data.frame(
as.double(crx$X2),
as.double(crx$X3),
as.double(crx$X8),
as.double(crx$X11))
data <- data.frame(
as.double(crx$X2),
as.double(crx$X3),
as.double(crx$X8),
as.double(crx$X11))
data <- c(
as.double(crx$X2),
as.double(crx$X3),
as.double(crx$X8),
as.double(crx$X11))
data
rm(data)
data <- data.frame(crx$X2, crx$X3, crx$X8, crx$X11)
# => Pasando a float nuestros valores
x2 <- as.double(data$crx.X2)
prom <- mean(crx$X2, na.rm = TRUE)
# => Obteniendo las columnas que ocupamos de los datos
data <- data.frame(crx$X2, crx$X3, crx$X8, crx$X11,  crx$X14,  crx$X15)
data
# => Obteniendo las columnas que ocupamos de los datos
data <- data.frame(
"X1" = crx$X2,
"X2" = crx$X3,
"X3" =  crx$X8,
"X4" = crx$X11,
"X5" = crx$X14,
"X6" = crx$X15)
data
# => Obteniendo los "NA" de nuestra data
pos <- which(data=='?')
data[pos,1] = 0
data
data[pos,1] = NA
data
pos
rm(data)
data <- data.frame(
"X1" = crx$X2,
"X2" = crx$X3,
"X3" = crx$X8,
"X4" = crx$X11,
"X5" = crx$X14,
"X6" = crx$X15)
# => Obteniendo los "NA" de nuestra data
pos <- which(data$X1=='?')
pos
data[pos,1] = NA
data
# => Pasando a float nuestros valores
X2 <- as.double(data$X1)
prom <- mean(X2, na.rm = TRUE)
prom
rm(x2)
rm(X2)
# => Obteniendo los "NA" de la fila X5
posX5 <- which(data$X5 == '?')
posX5
# => Reemplazando "?" por NA
data[posX5,5] = NA
data
# => Pasando a float nuestros valores
X5 <- as.double(data$X5)
# => Obteniendo promedio de la fila
prom <- mean(X5, na.rm = TRUE)
prom
# => Obteniendo promedio de la fila
prom <- mean(X1, na.rm = TRUE)
prom
library(readr)
crx <- read_csv("~/Downloads/crx.data", col_names = FALSE)
View(crx)
# => Obteniendo las columnas que ocupamos de los datos
data <- data.frame(
"X1" = crx$X2,
"X2" = crx$X3,
"X3" = crx$X8,
"X4" = crx$X11,
"X5" = crx$X14,
"X6" = crx$X15)
data
# => Obteniendo los "NA" de la fila X1
posX1 <- which(data$X1 == '?')
posX1
# => Reemplazando "?" por NA
data[posX1,1] = NA
data
is.na(data$X1)
data[posX1,1] = NA
data
X1 <- as.double(data$X1)
# => Obteniendo promedio de la fila
promX1 <- mean(X1, na.rm = TRUE)
promX1
data[posX1,1] = promX1
data
# => Reemplazando "?" por NA
data[posX1,1] = NA
data
# => Pasando a float nuestros valores
X1toFloat <- as.double(data$X1)
X1toFloat
# => Obteniendo promedio de la fila
promX1 <- mean(X1toFloat, na.rm = TRUE)
promX1
data[posX1,1] = promX1
data
# => Reemplazando "?" por NA
data[posX1,1] = NA
data
# ===== X5 =====
# => Obteniendo los "NA" de la fila X5
posX5 <- which(data$X5 == '?')
posX5
# => Reemplazando "?" por NA
data[posX5,5] = NA
data
data$X1
data[posX1,1] = promX1
data
data$X1
promX1 <- round(promX1, 2)
data[posX1,1] = promX1
data
# => Obteniendo promedio de la fila
promX5 <- mean(X5, na.rm = TRUE)
# => Reemplazando "?" por NA
data[posX5,5] = NA
data
# => Pasando a float nuestros valores
X5 <- as.double(data$X5)
# => Obteniendo promedio de la fila
promX5 <- mean(X5, na.rm = TRUE)
promX5 <- round(promX5, 2)
# => Reemplazando valores por el promedio de la columna
data[posX5,5] = promX5
data
class(data)
class(data$X1)
min_max_norm <- function(x) {
(x - min(x))/(max(x) - min(x))
}
normData <- as.data.frame(lapply(data[1:6], min_max_norm))
data
which(data == '?')
pos <- which(data == '?')
pos
rm(pos)
View(crx)
library(readr)
crx <- read_csv("~/Downloads/crx.data", col_names = FALSE)
View(crx)
data <- data.frame(
"X1" = crx$X3,
"X2" = crx$X8,
"X3" = crx$X15)
data
# ===== X1 =====
# => Obteniendo los "NA" de la fila X1
pos <- which(data == '?')
pos
View(data)
# Normalizando Datos
class(data)
data
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
normData <- as.data.frame(lapply(data[1:3], min_max_norm))
# Estandarizando
standData <- as.data.frame(scale(data[1:3]))
head(standData)
head(normData)
write.table(normData, file = "/Volumes/Macintosh Expansion - Data/Macintosh Expansión/Norm.txt")
write.table(standData, file = "/Volumes/Macintosh Expansion - Data/Macintosh Expansión/Stand.txt")
#
df <- iris
set.seed(1234)
# OPCION 1
ind <- sample(2, nrow(df), replace = TRUE, prob = c(0.7, 0.3))
# SegmantaciÃ³n aleatoria del conjunto de datos
random.train <- df[ind == 1,]
random.test <- df[ind == 2,]
# FunciÃ³n para calcular la distancia
distanciaManhattan <- function(x, y) {
result <- sum(abs(x-y))
}
# Inicializando vector dist (todas las columnas)
dist <- c()
# Ciclo for de 1 a 38
for (i in 1:38) {
# Inicializando vector lista (cada columna)
lista <- c()
# Ciclo for de 1 a 112
for (j in 1:112) {
# Se asignan las instancias(primera) de cada
# subconjunto de datos(train y test)
instTrain <- random.train[j, 1:4]
instTest <- random.test[i, 1:4]
# Se calcula la distancia que existe entre el train y test
result <- distanciaManhattan(instTrain, instTest)
# Se almacena en resultado a la lista
lista <- c(lista, round(result,2))
}
# Se agrega la columna de resultados (list)
dist <- cbind(dist, lista)
}
# Generando un data.frame
distancias <- data.frame(dist)
View(distancias)
#
df <- iris
set.seed(1234)
# OPCION 1
ind <- sample(2, nrow(df), replace = TRUE, prob = c(0.7, 0.3))
# SegmantaciÃ³n aleatoria del conjunto de datos
random.train <- df[ind == 1,]
random.test <- df[ind == 2,]
# FunciÃ³n para calcular la distancia
distanciaManhattan <- function(x, y) {
result <- sum(abs(x-y))
}
# Inicializando vector dist (todas las columnas)
dist <- c()
# Ciclo for de 1 a 38
for (i in 1:38) {
# Inicializando vector lista (cada columna)
lista <- c()
# Ciclo for de 1 a 112
for (j in 1:112) {
# Se asignan las instancias(primera) de cada
# subconjunto de datos(train y test)
instTrain <- random.train[j, 1:4]
instTest <- random.test[i, 1:4]
# Se calcula la distancia que existe entre el train y test
result <- distanciaManhattan(instTrain, instTest)
# Se almacena en resultado a la lista
columna <- c(lista, round(result,2))
}
# Se agrega la columna de resultados (list)
dist <- cbind(dist, columna)
}
# Generando un data.frame
distancias <- data.frame(dist)
View(distancias)
View(distancias)
#
df <- iris
set.seed(1234)
# OPCION 1
ind <- sample(2, nrow(df), replace = TRUE, prob = c(0.7, 0.3))
# SegmantaciÃ³n aleatoria del conjunto de datos
random.train <- df[ind == 1,]
random.test <- df[ind == 2,]
# FunciÃ³n para calcular la distancia
distanciaManhattan <- function(x, y) {
result <- sum(abs(x-y))
}
# Inicializando vector dist (todas las columnas)
dist <- c()
# Ciclo for de 1 a 38
for (i in 1:38) {
# Inicializando vector lista (cada columna)
lista <- c()
# Ciclo for de 1 a 112
for (j in 1:112) {
# Se asignan las instancias(primera) de cada
# subconjunto de datos(train y test)
instTrain <- random.train[j, 1:4]
instTest <- random.test[i, 1:4]
# Se calcula la distancia que existe entre el train y test
result <- distanciaManhattan(instTrain, instTest)
# Se almacena en resultado a la lista
columna <- c(columna, round(result,2))
}
# Se agrega la columna de resultados (list)
dist <- cbind(dist, columna)
}
# Generando un data.frame
distancias <- data.frame(dist)
#
df <- iris
set.seed(1234)
# OPCION 1
ind <- sample(2, nrow(df), replace = TRUE, prob = c(0.7, 0.3))
# SegmantaciÃ³n aleatoria del conjunto de datos
random.train <- df[ind == 1,]
random.test <- df[ind == 2,]
# FunciÃ³n para calcular la distancia
distanciaManhattan <- function(x, y) {
result <- sum(abs(x-y))
}
# Inicializando vector dist (todas las columnas)
dist <- c()
# Ciclo for de 1 a 38
for (i in 1:38) {
# Inicializando vector lista (cada columna)
columna <- c()
# Ciclo for de 1 a 112
for (j in 1:112) {
# Se asignan las instancias(primera) de cada
# subconjunto de datos(train y test)
instTrain <- random.train[j, 1:4]
instTest <- random.test[i, 1:4]
# Se calcula la distancia que existe entre el train y test
result <- distanciaManhattan(instTrain, instTest)
# Se almacena en resultado a la lista
columna <- c(columna, round(result,2))
}
# Se agrega la columna de resultados (list)
dist <- cbind(dist, columna)
}
# Generando un data.frame
distancias <- data.frame(dist)
#
df <- iris
set.seed(1234)
# OPCION 1
ind <- sample(2, nrow(df), replace = TRUE, prob = c(0.7, 0.3))
# SegmantaciÃ³n aleatoria del conjunto de datos
random.train <- df[ind == 1,]
random.test <- df[ind == 2,]
# FunciÃ³n para calcular la distancia
distanciaManhattan <- function(x, y) {
result <- sum(abs(x-y))
}
# Inicializando vector dist (todas las columnas)
dist <- c()
# Ciclo for de 1 a 38
for (i in 1:38) {
# Inicializando vector lista (cada columna)
columna <- c()
# Ciclo for de 1 a 112
for (j in 1:112) {
# Se asignan las instancias(primera) de cada
# subconjunto de datos(train y test)
instTrain <- random.train[j, 1:4]
instTest <- random.test[i, 1:4]
# Se calcula la distancia que existe entre el train y test
result <- distanciaManhattan(instTrain, instTest)
# Se almacena en resultado a la lista
columna <- c(columna, round(result,2))
}
# Se agrega la columna de resultados (list)
dist <- cbind(dist, columna)
}
# Generando un data.frame
distancias <- data.frame(dist)
View(distancias)
